@UTF8
% variables
S = .*sh|.*ch|.*[zxs]  % strings that end in affricates, sibilants
X = .*  % any string
L = .  % any single letter

% ******************************************************
% CONCATENATION RULES
% ******************************************************

% these words don't get any further inflection

RULENAME: bare-start
CTYPE: START
 if
 NEXTCAT = [scat OR adj:pred adv adv:int adv:tem bab co co:voc conj coord det:poss \
 	det det:wh fil fs inf int mod:aux n:gerund neg part phon pm pro:obj pro:sub pro:poss pro:poss:det \
	pro:refl ptl qn rel rel:wh unk tag voc w\
	beg end cm bq eq \
	0aux 0adj 0adv 0conj 0cop 0det 0inf 0mod 0neg 0part 0pro \
	0prep 0n 0rel 0v 0zero ]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {}

% neologisms and such, on the other hand, sometimes get pluralized

RULENAME: special-start
CTYPE: START
 if
 NEXTCAT = [scat OR chi det:num dia fam kana L2 meta n:let neo  \
 	prep sas sing sign test uni wplay ]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {n-pl, denom-deriv}

% other starts in later rules:
% adj adv:tem adv:wh det:num n n:let n:prop n:pt 
% pfx pro pro:dem pro:indef pro:wh pro:exist v aux rel

% ******** *
% PREFIXES *
% ******** *

RULENAME: pfx-start
CTYPE: START
 if
 NEXTCAT = [scat pfx], [pcat OR adj adj:n n part v]  
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {pfx-v, pfx-adj, pfx-adj:n, pfx-n, pfx-part}

RULENAME: pfx-v
CTYPE: #
% first blocking
if
 STARTCAT = [pcat v]
 NEXTCAT = [scat v]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]    %  poison pill
 RULEPACKAGE = {}
% then general
 if
 STARTCAT = [pcat v]
 NEXTCAT = [scat v]
 then
 RESULTCAT = NEXTCAT, DEL [drv]
 RULEPACKAGE = {v-conj, v-past, participials, adj:v-deriv, n:v-deriv}

RULENAME: pfx-adj
CTYPE: #
% first blocking
 if
 STARTCAT = [pcat adj]
 NEXTCAT = [scat adj]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% then general
 if
 STARTCAT = [pcat adj]
 NEXTCAT = [scat adj]
 then
 RESULTCAT = ADD [scat adj], DEL [allo], ADD [allo a0]
 RULEPACKAGE = {adj-degree, adj-v-degree, adj-suffix, adv-ly, n:adj-deriv, denom-deriv}

RULENAME: pfx-adj:n
CTYPE: #
% first blocking
 if
 STARTCAT = [pcat adj:n]
 NEXTCAT = [scat n]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}
% then general
 if
 STARTCAT = [pcat adj:n]
 NEXTCAT = [scat n],
 then
 RESULTCAT = NEXTCAT, ADD [deriv dn]
 RULEPACKAGE = {adj-degree, adv-ly, n-pl}

RULENAME: pfx-n
CTYPE: #
% first blocking
 if
 STARTCAT = [pcat n]
 NEXTCAT = [scat n]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}
% then general
 if
 STARTCAT = [pcat n]
 NEXTCAT = [scat n]
 then
 RESULTCAT = NEXTCAT, DEL [drv]
 RULEPACKAGE = {n-pl, n-cl, n-poss, denom-deriv}

RULENAME: pfx-part
CTYPE: #
% first blocking
 if
 STARTCAT = [pcat part]
 NEXTCAT = [scat part]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}
% then general
 if
 STARTCAT = [pcat part]
 NEXTCAT = [scat part]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {}

% ******************
%  VERBS 
% ******************

RULENAME: v-start
CTYPE: START

% irregular pasts like "cost" end here
 if
 NEXTCAT = [scat v], [bare yes]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {}

% also irregular participles 
 if 
 NEXTCAT = [scat part]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {}
 
% most forms go onwards
 if 
 NEXTCAT = [scat OR v cop]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {v-neg, v-past, v-conj, adj:v-deriv, participials, n:v-deriv}

% auxiliaries
 if
 NEXTCAT = [scat OR aux mod]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {v-neg}

RULENAME: v-neg

CTYPE: ~
 if
 STARTCAT = [scat OR aux mod cop]
 NEXTCAT = [scat v-cl], [neg +]
 then
 RESULTCAT = STARTCAT, DEL [allo], ADD [neg +]
 RULEPACKAGE = {}
% have clitics on modals
 if
 NEXTCAT = [scat n-cl]
 NEXTSURF = 've|-'ve
 then
 RESULTCAT = STARTCAT, DEL [allo], NEXTCAT [vform], ADD [neg +]
 RULEPACKAGE = {}

RULENAME: v-past
CTYPE: -
 if
 NEXTCAT = [tense past], ![scat OR part adj n:gerund]
 MATCHCAT [allo]
then
 RESULTCAT = STARTCAT, NEXTCAT [tense], DEL [allo], DEL [bare]
 RULEPACKAGE = {}

RULENAME: v-conj
CTYPE: -
 if
 STARTCAT = [scat v]
 STARTSURF = $Xo      %  ending in "o" like "do"
 NEXTSURF = es
 NEXTCAT =  [scat vsfx]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, NEXTCAT [tense], DEL [allo]
 RULEPACKAGE = {}

% clause 2 - general case conjugation, except for tense
 if
 STARTCAT = [scat v]
 NEXTCAT = [scat vsfx], ![tense OR past]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, DEL [allo], DEL [bare]
 RULEPACKAGE = {}


% **************   *
%  NOUNS         *
% **************   *

RULENAME: n-start
CTYPE: START
 if
 NEXTCAT = [scat OR co n n:let n:prop n:pt on]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {n-pl, n-cl, n-poss, participials, denom-deriv}     

 if
 NEXTCAT = [scat OR adv:wh adv:tem pro pro:dem pro:exist pro:obj pro:sub rel]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {n-cl}

 if
 NEXTCAT = [scat OR det:num pro:indef pro:refl pro:wh post]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {n-cl, n-poss}

% *********************************  *
%   DERIVATIONALS   and CONVERTORS 
%  all convertors should be listed here for all parts of speech
% *********************************  *

RULENAME: adj:v-deriv 
CTYPE: -
% first blocking
 if 
STARTCAT = [scat v]
NEXTCAT = [dcat adj:v]
MATCHCAT [block]
then
RESULTCAT = ADD [scat pfx]
RULEPACKAGE = {}

% then basic case for  -able, -less, -ier, -iest, -y
 if 
STARTCAT = [scat v]
NEXTCAT = [dcat adj:v], [deriv dv], ![bare no]
MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT [comp], ADD [scat adj], DEL [allo], ADD [allo a0], ADD [deriv dv]
 RULEPACKAGE = {adj-ab-ly, adj-degree, adv-ly, n:adj-deriv, n-pl}

% finally    -i, -ab
 if 
STARTCAT = [scat v]
NEXTCAT = [dcat adj:v], [deriv dv], [bare no]
MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT [comp], ADD [scat adj], DEL [allo], ADD [allo a0], ADD [deriv dv], ADD [bare no]
 RULEPACKAGE = {adj-degree, n:adj-deriv, n-pl, adv-ly}

RULENAME: participials
CTYPE: -
% first blocking
 if 
 STARTCAT = [scat OR n v]
 NEXTCAT = [scat OR adj part n:gerund]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% denominal -ed adjectives, like blurb-ed
 if
 STARTCAT = [scat n]
 NEXTCAT = [scat part]
 NEXTSURF = ed
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo a0], DEL [bare]
 RULEPACKAGE = {adv-ly, n:adj-deriv, denom-deriv}

% deverbal -ed adjectives, like supposed(ly)
 if
 STARTCAT = [scat v]
 NEXTCAT = [scat part]
 NEXTSURF = ed
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo a0], DEL [bare]
 RULEPACKAGE = {adv-ly, n:adj-deriv, denom-deriv}

% deverbal gerunds, including compounds like baby+sitting
 if
 STARTCAT = [scat v]
 NEXTCAT = [scat n:gerund]
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo n0], DEL [bare]
 RULEPACKAGE = {n-pl, n-cl, n-poss, n:adj-deriv, denom-deriv}

% denominal gerunds, including compounds like roller+skating
 if
 STARTCAT = [scat n]
 NEXTCAT = [scat n:gerund]
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo n0], DEL [bare]
 RULEPACKAGE = {n-pl, n-cl, n-poss, n:adj-deriv, denom-deriv}

% deverbal participles, including compounds like baby+sitting
 if
 STARTCAT = [scat v]
 NEXTCAT = [scat part]
 NEXTSURF = ing
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo a0], DEL [bare]
 RULEPACKAGE = {adv-ly, n:adj-deriv, denom-deriv}

% denominal participles, including compounds like roller+skating
 if
 STARTCAT = [scat n], ![block part]
 NEXTCAT = [scat part]
 NEXTSURF = ing
 MATCHCAT [allo]
 then
 RESULTCAT = NEXTCAT, STARTCAT [comp], NEXTCAT [tense], DEL [allo], ADD [allo a0], DEL [bare]
 RULEPACKAGE = {adv-ly, n:adj-deriv, denom-deriv}

RULENAME: n:v-deriv
CTYPE:	-

% first blocking
 if
 STARTCAT = [scat v]
 NEXTCAT = [dcat n:v]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% then general case
 if
 STARTCAT = [scat v]
 NEXTCAT = [dcat n:v], [deriv dv]		% this is just for -er
 MATCHCAT [allo]
 then
 RESULTCAT = ADD [scat n], ADD [allo n0], ADD [deriv dv], STARTCAT [comp]
 RULEPACKAGE = {n-pl, n-cl, n-poss, denom-deriv}

RULENAME: n:adj-deriv
CTYPE: -
% first blocking
if
 STARTCAT = [scat OR adj part]
 NEXTCAT =  [dcat n:adj], [deriv dadj]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

 RULEPACKAGE = {n-pl, n-cl, n-poss}
% -ness
 if
 STARTCAT = [scat OR adj part]
 NEXTSURF =  ness
 MATCHCAT [allo]
 then
 RESULTCAT = ADD [scat n], DEL [allo], ADD [allo nSa], ADD [deriv dadj], STARTCAT [comp], DEL [bare]
 RULEPACKAGE = {n-pl, n-cl}

% then general case
 if
 STARTCAT = [scat OR adj part]
 NEXTCAT =  [dcat n:adj], [deriv dadj]
 MATCHCAT [allo]
 then
 RESULTCAT = ADD [scat n], DEL [allo], ADD [allo n0], ADD [deriv dadj], STARTCAT [comp], DEL [bare]
 RULEPACKAGE = {n-pl, n-cl}

RULENAME: denom-deriv
CTYPE: -

% #1 blocking dcats
 if
 STARTCAT = [scat OR n det:num]							
 NEXTCAT = [dcat OR adj:n n:adj]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% #2 blocking scats
if
 STARTCAT = [scat OR n det:num]							
 NEXTCAT = [scat OR ndsfx ndimsfx]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% #3 basic adj:n rule for -sh, -less, -full -ly -y 
if
 STARTCAT = [scat OR n det:num]
 NEXTCAT =  [dcat adj:n], ![bare no]
 MATCHCAT [allo]
 then
 RESULTCAT =  STARTCAT [comp], ADD [scat adj], ADD [allo a0], ADD [deriv dn]
 RULEPACKAGE = {n-pl, n:adj-deriv, adv-ly, adj-degree, denom-deriv}
 
% #4 for -i
if
 STARTCAT = [scat OR n det:num]
 NEXTCAT =  [dcat adj:n], [bare no]
 MATCHCAT [allo]
 then
 RESULTCAT =  STARTCAT [comp], ADD [bare no], ADD [scat adj], ADD [allo a0], ADD [deriv dn]
 RULEPACKAGE = {n-pl, n:adj-deriv, adv-ly, adj-degree, denom-deriv}

%  #5  rule for diminutives and LY
if
 STARTCAT = [scat OR adj n n:pt]
 NEXTCAT = [scat ndimsfx]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, STARTCAT [comp], DEL [allo], DEL [pl], ADD [allo n0]
 RULEPACKAGE = {n-pl, n-cl, n-poss}

%  #6  -like, -ness, and -sie
 if
 STARTCAT = [scat OR n n:pt]
 NEXTCAT = [scat ndsfx]
 then
 RESULTCAT = STARTCAT, STARTCAT [comp], DEL [allo], ADD [allo n0]
 RULEPACKAGE = {n-pl, n-cl, n-poss}

% **************   *
%    PLURALS       *
% **************   *

RULENAME: n-pl
CTYPE: -

% first blocking
if
 NEXTCAT = [scat npsfx]
 MATCHCAT [block]
then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% proper nouns, special forms that have to use -s
 if
 NEXTSURF = -s
 NEXTCAT = [scat npsfx]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, NEXTCAT [num], DEL [bare], STARTCAT [comp]
 RULEPACKAGE = {}

% adjectives 
 if
 STARTCAT = [scat adj]
 NEXTCAT = [scat npsfx]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, DEL [scat], ADD [scat n:adj], DEL [allo], ADD [allo n0]
 RULEPACKAGE = {n-cl, n-poss}

% general case 
 if
 NEXTCAT = [scat npsfx]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, NEXTCAT [num], DEL [allo], DEL [bare], STARTCAT [comp]
 RULEPACKAGE = {n-cl, n-poss}


% **************   *
%    CLITICS       *
% **************   *


RULENAME: n-cl
CTYPE: ~
% cliticized auxiliary verbs on nouns
 if
 STARTCAT = ![allo OR nVa nYb nHb]
 NEXTCAT =  [scat n-cl], ![vcat poss]
 then
 RESULTCAT = STARTCAT, DEL [allo], NEXTCAT [vform], NEXTCAT [vcat], STARTCAT [comp]
 RULEPACKAGE = {}

RULENAME: n-poss
CTYPE: ~
% cliticized possessives on nouns
 if
 STARTCAT = ![allo OR nVa nYb nHb]
 NEXTCAT =  [vcat poss]
 then
 RESULTCAT = STARTCAT, DEL [allo], NEXTCAT [vform], NEXTCAT [vcat]
 RULEPACKAGE = {}

% ******* *
%  ADJS   *
% ******* *

RULENAME: adj-start
CTYPE: START
 if
 NEXTCAT = [scat adj]
 then
 RESULTCAT = NEXTCAT
 RULEPACKAGE = {adj-degree, adj-v-degree, adj-suffix, adv-ly, n:adj-deriv, n-pl}

RULENAME: adj-degree
CTYPE: -
 if
 STARTCAT = [scat adj]
 NEXTCAT =  [scat adjsfx], [degree OR cp sp]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, NEXTCAT [degree], DEL [allo], ADD [allo a0], DEL [bare]
 RULEPACKAGE = {}

RULENAME: adj-v-degree
CTYPE: -
 if
 STARTCAT = [scat v]
 NEXTCAT =  [scat adj:v], [degree OR cp sp]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, NEXTCAT [degree], DEL [allo], ADD [allo a0]
 RULEPACKAGE = {}

RULENAME: adj-suffix
CTYPE: -
% blocking first
 if
 STARTCAT = [scat adj]
 NEXTCAT = [scat adjsfx]
 MATCHCAT [block]
 then
 RESULTCAT = ADD [scat pfx]
 RULEPACKAGE = {}

% general rule
 if
 STARTCAT = [scat adj]
 NEXTCAT = [scat adjsfx]
 NEXTSURF = al|ish|y|i
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT, DEL [allo], ADD [allo a0]
 RULEPACKAGE = {adj-degree, adv-ly}

RULENAME: adv-ly
CTYPE: -
 if
 STARTCAT = [scat OR adj part n:gerund]
 NEXTCAT = [dcat adv:adj], [deriv dadj]
 MATCHCAT [allo]
 then
 RESULTCAT = STARTCAT [comp], ADD [scat adv],  ADD [deriv dadj], DEL [bare no]
 RULEPACKAGE = {}

RULENAME: adj-ab-ly
CTYPE: -
 if
 NEXTCAT = [dcat adv:adj], [deriv dadj]
 MATCHCAT [allo]
 then
 RESULTCAT = ADD [scat adv],  ADD [deriv dadj], DEL [bare no]
 RULEPACKAGE = {}

% *************************************************************
%  ENDRULES  % endrules apply when end of the word is reached *
%            % used to rule out incomplete parses             *
% *************************************************************

RULENAME: end-rule
 CTYPE: END
 if
 STARTCAT = ![scat pfx], ![bare no], ![allo OR nGb nHb nYb aHb aVEb aYb aLLb aLc aLb aICb]
 then
 RESULTCAT = STARTCAT
 RULEPACKAGE = {}

